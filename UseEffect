UseEffect.jsx
// import { useEffect, useState } from 'react'

// const UseEffect = () => {
//     let [state , setState] = useState(0)
//     useEffect(() => {
//         setTimeout(() => {
//              setState(() => state + 1)
//         } , 2000)
//     })
//   return (
//     <div>
//         <h1>{state}</h1>
//     </div>
//   )
// }

// export default UseEffect

//empty dependency

import { useEffect, useState } from 'react'

const UseEffect = () => {
    let [state , setState] = useState(0)
    useEffect(() => {
        setTimeout(() => {
             setState(() => state + 1)
        } , 2000)
    } , [])
  return (
    <div>
        <h1>{state}</h1>
    </div>
  )
}

export default UseEffect

Main.jsx
// import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
// import './index.css'

// import Cbc from './component/Cbc.jsx'
// import Fbc from './Component/Fbc.jsx'
// import Demo from './Component/Demo.jsx'
// import Parent from './props/parent.jsx'

// import Inline from './styles/Inline.jsx'
// import "../src/styles/globally.css"
// import Comp1 from './styles/Comp1.jsx'
// import External from './styles/External.jsx'
import { StrictMode } from 'react'
import UseEffect from './UseEffect/UseEffect'
// import Comp3 from './list-keys/Comp3'
// import List from './list-keys/List'
// import CompA from './useContecxt/CompA'
// import Ref from './useRef/Ref.jsx'


createRoot(document.getElementById('root')).render(
  <StrictMode>
     {/* <Inline/> */}
     {/*<Comp1/> */} ,
     {/* <External/> */}
     {/* <Ref/> */}
     {/* <Comp3/> */}
     {/* <List/> */}
    {/* <CompA/> */}
     <UseEffect/> 

  </StrictMode>
   
   
 
  
) 
